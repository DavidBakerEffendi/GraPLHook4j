plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
    mavenCentral()
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-core:2.8.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    implementation 'org.apache.tinkerpop:gremlin-core:3.4.6'
    implementation 'org.apache.tinkerpop:tinkergraph-gremlin:3.4.6'
    implementation 'org.janusgraph:janusgraph-core:0.5.1'
    implementation 'org.janusgraph:janusgraph-inmemory:0.5.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport

group = 'za.ac.sun.grapl'
version = '0.0.4'
description = 'GraPLHook4j'
sourceCompatibility = '8'

task fatJar(type: Jar) {
    archiveClassifier.set('all')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

artifacts {
    archives fatJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
